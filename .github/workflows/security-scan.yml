name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    # Static Application Security Testing (SAST)
    - name: Run Bandit security scan
      run: |
        bandit -r server/app -f json -o bandit-results.json || true
        bandit -r server/app -f txt

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-results.json

    # Software Composition Analysis (SCA)
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-results.json || true
        safety check

    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: safety-results.json

    # Dependency vulnerability scanning with pip-audit
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-results.json || true
        pip-audit

    - name: Upload pip-audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-results.json

    # Secret scanning
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline --all-files || true

    # CodeQL Analysis for advanced security scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    # Semgrep security analysis
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    # Upload security scan results to GitHub Security tab
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

    # Generate security report
    - name: Generate security report
      if: always()
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated: $(date -u)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Bandit (SAST) Results" >> security-report.md
        if [ -f bandit-results.json ]; then
          python -c "
import json
with open('bandit-results.json') as f:
    data = json.load(f)
    print(f'- Total issues: {len(data.get(\"results\", []))}')
    high = len([r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH'])
    medium = len([r for r in data.get('results', []) if r.get('issue_severity') == 'MEDIUM'])
    low = len([r for r in data.get('results', []) if r.get('issue_severity') == 'LOW'])
    print(f'- High severity: {high}')
    print(f'- Medium severity: {medium}')
    print(f'- Low severity: {low}')
          " >> security-report.md
        else
          echo "- No Bandit results available" >> security-report.md
        fi
        echo "" >> security-report.md
        
        echo "## Safety (Dependency Vulnerabilities) Results" >> security-report.md
        if [ -f safety-results.json ]; then
          python -c "
import json
with open('safety-results.json') as f:
    try:
        data = json.load(f)
        print(f'- Vulnerabilities found: {len(data)}')
    except:
        print('- No vulnerabilities found')
          " >> security-report.md
        else
          echo "- No Safety results available" >> security-report.md
        fi
        
        cat security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.md

    # Fail the job if high-severity vulnerabilities are found
    - name: Evaluate security posture
      if: always()
      run: |
        if [ -f bandit-results.json ]; then
          HIGH_ISSUES=$(python -c "
import json
with open('bandit-results.json') as f:
    data = json.load(f)
    high = len([r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH'])
    print(high)
          ")
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "❌ HIGH severity security issues found: $HIGH_ISSUES"
            exit 1
          fi
        fi
        
        if [ -f safety-results.json ]; then
          VULNS=$(python -c "
import json
try:
    with open('safety-results.json') as f:
        data = json.load(f)
        print(len(data))
except:
    print(0)
          ")
          if [ "$VULNS" -gt 0 ]; then
            echo "❌ Dependency vulnerabilities found: $VULNS"
            echo "⚠️  Please review and update vulnerable dependencies"
            # Only warn for now, don't fail the build
            # exit 1
          fi
        fi
        
        echo "✅ Security scan completed successfully"