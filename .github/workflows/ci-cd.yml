# Context Memory Gateway CI/CD Pipeline
# Comprehensive workflow with testing, security scanning, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # ================================
  # CODE QUALITY AND TESTING
  # ================================
  
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install pre-commit
      run: pip install pre-commit
      
    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        
    - name: Run pre-commit hooks
      run: pre-commit run --all-files
      
    - name: Type checking with mypy
      run: mypy server/app --ignore-missing-imports
      continue-on-error: true
      
    - name: Code complexity analysis
      run: |
        pip install radon xenon
        radon cc server/app --average --show-complexity
        xenon server/app --max-average A --max-modules A --max-absolute B
      continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Create test environment file
      run: |
        cat > server/.env.test << EOF
        DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        REDIS_URL=redis://localhost:6379/1
        SECRET_KEY=test-secret-key-for-testing-only
        ENVIRONMENT=testing
        DEBUG=true
        EOF
        
    - name: Run unit tests with coverage
      run: |
        cd server
        python -m pytest tests/unit/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./server/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          server/test-results.xml
          server/htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432 -U test; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
        
    - name: Run database migrations
      run: |
        cd server
        export DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        export REDIS_URL=redis://localhost:6379/1
        alembic upgrade head
        
    - name: Run integration tests
      run: |
        cd server
        export DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        export REDIS_URL=redis://localhost:6379/1
        export SECRET_KEY=test-secret-key-for-testing-only
        python -m pytest tests/integration/ \
          --junitxml=integration-test-results.xml \
          -v
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: server/integration-test-results.xml

  # ================================
  # SECURITY SCANNING
  # ================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r server/app -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Safety vulnerability check
      run: |
        pip install safety
        safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run Semgrep static analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        generateSarif: "1"
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep.sarif
          
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-audit
      run: pip install pip-audit
      
    - name: Audit dependencies
      run: |
        pip-audit --format=json --output=pip-audit-report.json requirements.txt
      continue-on-error: true
      
    - name: Check for outdated packages
      run: |
        pip install pip-check
        pip-check --format json > outdated-packages.json
      continue-on-error: true
      
    - name: Generate dependency tree
      run: |
        pip install pipdeptree
        pipdeptree --json > dependency-tree.json
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          outdated-packages.json
          dependency-tree.json

  # ================================
  # DOCKER BUILD AND SCAN
  # ================================
  
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ github.ref_name }}
          VCS_REF=${{ github.sha }}
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Load Docker image
      run: docker load --input /tmp/image.tar
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          trivy-results.sarif
          trivy-fs-results.sarif
          
    - name: Docker image security scan with Snyk
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        args: --severity-threshold=high
      continue-on-error: true

  # ================================
  # PERFORMANCE TESTING
  # ================================
  
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance-test')
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install aiohttp
        
    - name: Start application
      run: |
        cd server
        export DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        export REDIS_URL=redis://localhost:6379/1
        export SECRET_KEY=test-secret-key
        alembic upgrade head
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance benchmarks
      run: |
        cd server
        python scripts/benchmark_cli.py \
          --type throughput \
          --requests 100 \
          --concurrent 10 \
          --output performance-results.json
          
    - name: Generate performance report
      run: |
        cd server
        python scripts/performance_report.py \
          performance-results.json \
          -o performance-report.html
          
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          server/performance-results.json
          server/performance-report.html

  # ================================
  # DEPLOYMENT
  # ================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, helm, docker-compose, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.release.published_at }}
          VERSION=${{ github.event.release.tag_name }}
          VCS_REF=${{ github.sha }}
          
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Create deployment summary
      run: |
        echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Released by:** ${{ github.event.release.author.login }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release notes:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY

  # ================================
  # NOTIFICATIONS
  # ================================
  
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Production deployment successful!"
        # Add Slack/Discord/email notifications here
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        # Add failure notifications here