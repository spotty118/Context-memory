[tool.bandit]
# Bandit configuration for Context Memory Gateway security scanning

# Include all Python files in the server directory
include = ["server/app"]

# Exclude test files and temporary directories
exclude_dirs = [
    "tests",
    "test_*",
    "*_test",
    "venv",
    ".venv",
    "build",
    "dist",
    ".git"
]

# Skip specific test IDs that are false positives or acceptable risks
skips = [
    "B101",  # assert_used - We use asserts in tests
    "B601",  # paramiko_calls - We don't use paramiko
    "B602",  # subprocess_popen_with_shell_equals_true - Handled carefully
]

# Set confidence levels for reporting
# HIGH: Only report high confidence issues
# MEDIUM: Report medium and high confidence issues  
# LOW: Report all issues
confidence = "MEDIUM"

# Severity levels to report
# LOW: Report all severity levels
# MEDIUM: Report medium and high severity
# HIGH: Only report high severity
severity = "LOW"

# Additional settings
recursive = true
aggregate = "file"
number = 3
format = "json"

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle", 
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]

[tool.bandit.hardcoded_bind_all_interfaces]
# Allow binding to all interfaces in development
skip = false

[tool.bandit.hardcoded_password_string]
# Skip password detection in test files
word_list = ["password", "pass", "passwd", "pwd", "secret", "token"]

[tool.bandit.hardcoded_password_funcarg]
# Skip hardcoded passwords in function arguments
word_list = ["password", "pass", "passwd", "pwd", "secret", "token"]

[tool.bandit.hardcoded_password_default]
# Skip hardcoded passwords in default values
word_list = ["password", "pass", "passwd", "pwd", "secret", "token"]

[tool.bandit.ssl_with_bad_version]
# Ensure we're using secure SSL/TLS versions
bad_protocol_versions = [
    "PROTOCOL_SSLv2",
    "PROTOCOL_SSLv3", 
    "PROTOCOL_TLSv1",
    "PROTOCOL_TLSv1_1"
]

[tool.bandit.ssl_with_bad_defaults]
# Check for SSL contexts with bad defaults
bad_protocol_versions = [
    "PROTOCOL_SSLv2",
    "PROTOCOL_SSLv3",
    "PROTOCOL_TLSv1", 
    "PROTOCOL_TLSv1_1"
]

[tool.bandit.ssl_with_no_version]
# Ensure SSL version is specified
skip = false

# Additional tool configurations for CI/CD pipeline

[tool.black]
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "alembic", "redis"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "T201",  # print found
    "S104",  # possible binding to all interfaces
]
unfixable = ["B", "F401"]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S608"]
"scripts/*" = ["T201"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "prometheus_client.*",
    "structlog.*",
    "tenacity.*",
    "pgvector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "load: Load tests",
    "slow: Slow running tests",
    "security: Security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["server/app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2