# Context Memory Gateway - Docker Compose Deployment
# For development, testing, and simple staging deployments

version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: cmg-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-context_memory_gateway}
      POSTGRES_USER: ${POSTGRES_USER:-cmg_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cmg_user} -d ${POSTGRES_DB:-context_memory_gateway}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - cmg-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cmg-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secure_password}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - cmg-network

  # Context Memory Gateway Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF}
    container_name: cmg-app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cmg_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-context_memory_gateway}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-jwt-secret-key-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-60}
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      DEFAULT_RATE_LIMIT: ${DEFAULT_RATE_LIMIT:-100}
      
      # External API Configuration
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      
      # Feature Flags
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-false}
      ENABLE_CACHING: ${ENABLE_CACHING:-true}
      
      # Performance Configuration
      MAX_WORKERS: ${MAX_WORKERS:-4}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-30}
      
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - cmg-network

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: cmg-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cmg-network
    profiles:
      - production

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: cmg-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cmg-network
    profiles:
      - monitoring

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: cmg-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - cmg-network
    profiles:
      - monitoring

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cmg-jaeger
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    volumes:
      - jaeger_data:/tmp
    restart: unless-stopped
    networks:
      - cmg-network
    profiles:
      - tracing

  # Database Migration (One-time job)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cmg-migrate
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cmg_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-context_memory_gateway}
    command: >
      sh -c "
        cd /app/server &&
        alembic upgrade head
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cmg-network
    profiles:
      - migration

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

# Network configuration
networks:
  cmg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16