# Simplified Docker Compose for quick development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: cmg-postgres
    environment:
      POSTGRES_DB: context_memory_gateway
      POSTGRES_USER: cmg_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cmg_user -d context_memory_gateway"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cmg-redis
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Context Memory Gateway Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: cmg-app
    environment:
      DATABASE_URL: postgresql://cmg_user:secure_password@postgres:5432/context_memory_gateway
      REDIS_URL: redis://:redis_password@redis:6379/0
      SECRET_KEY: your-super-secret-key-change-in-production
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: